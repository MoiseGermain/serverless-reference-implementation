trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include: 
    - src/ClientApp

stages:
- stage: Build
  jobs:
  - job: WebsiteBuild
    displayName: Build Moise Drone Status app using Gatsby.js
    pool:
      vmImage: 'ubuntu-20.04'
    continueOnError: false
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        cd src/ClientApp
        cat > .env.production <<EOF
        AZURE_TENANT_ID=90226259-47f2-4658-9c1c-a13fe3e2a459
        AZURE_CLIENT_ID=a6cd7a26-a6b9-4807-9c9e-9000d72ba1e0
        AZURE_API_CLIENT_ID=a6cd7a26-a6b9-4807-9c9e-9000d72ba1e0
        AZURE_API_URL=https://dronespy22arfo5ur6y-dronestatus.azurewebsites.net
        ACCESS_TOKEN_SCOPE=api://a6cd7a26-a6b9-4807-9c9e-9000d72ba1e0/API_IMPERSONATION_PERMISSION
        EOF
      displayName: 'Configure Azure tenant, client and API details'

    - script: |
        cd src/ClientApp
        npm install
        npx gatsby build
      displayName: 'Gatsby build'

    - script: |
        cd src/ClientApp/public
        sudo apt-get install brotli --install-suggests --no-install-recommends -q --assume-yes
        for f in $(find . -type f \( -iname '*.html' -o -iname '*.map' -o -iname '*.js' -o -iname '*.json' \)); do brotli $f -Z -j -f -v && mv ${f}.br $f; done
      displayName: 'Enable compression at origin level'

    - script: |
        cd $(Build.SourcesDirectory)
        echo $(docker run --rm -v "$(pwd):/repo" gittools/gitversion:5.6.10-alpine.3.12-x64-3.1 /repo) > .gitversion
        echo $(cat .gitversion | grep -oP '(?<="MajorMinorPatch": ")[^"]*') > src/ClientApp/public/version.txt
        echo $(cat .gitversion | grep -oP '(?<="FullSemVer": ")[^"]*' | sed -e "s/\+/-/g") > src/ClientApp/public/semver.txt
      displayName: 'Bump version'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'src/ClientApp/public'
        artifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  jobs:
  - deployment: WebsiteDeploy
    displayName: Deploy Moise Drone Status app
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'Moise-prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "##vso[task.setvariable variable=releaseVersion]v1"
            displayName: 'Set fixed release version'

          - script: |
              echo "Release version: $(releaseVersion)"
            displayName: 'Print releaseVersion variable'

          - task: GithubRelease@0
            displayName: 'Create or edit GitHub release'
            inputs:
              gitHubConnection: 'MoiseGermain-srvconn'
              tagSource: manual
              action: edit
              tag: $(releaseVersion)
              title: 'Moise Drone Status App $(releaseVersion)'
